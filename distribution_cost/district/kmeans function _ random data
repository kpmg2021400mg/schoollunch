#python library
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.colors as mcolors
from matplotlib import style
import numpy as np
import random

#Kmeans function
def kmean(n, k):
  d = n.shape[1]
  c = np.random.choice(range(len(n)),k)
  c = n[c].astype('float32')
  print(c)
  init = True
  while init == True:
    cluster = np.zeros((len(n),k))

    for i in range(len(n)):
      temp = np.zeros((k))

      for j in range(k):
        g_temp = 0
        for g in range(d):
          g_temp += (c[j][g] - n[i][g])**2

        temp[j] = g_temp**0.5

      cluster[i][np.argmin(temp)] = 1

    cnt = 0

    for p in range(k):
      clu_index = np.where(cluster[:,p]==1)
      clu_vec = n[clu_index]
      k_to_c = np.sum(clu_vec, axis=0)/len(clu_vec)
      point_c = 0
      for g in range(d):
        point_c += (c[p][g] - k_to_c[g])**2

      if point_c**0.5 < 3:
        cnt += 1
        if cnt == k:
          init = False
          break
      c[p] = k_to_c
  print(c)
  return cluster, c

 #sample data 만드는 중
x = np.random.choice(range(1, 1001), 100).reshape(-1, 1)
y = np.random.choice(range(1, 1001), 100).reshape(-1, 1)
z = np.random.choice(range(1, 1001), 100).reshape(-1, 1)

data = np.hstack((x,y,z)) #3D-data
#data = np.hstack((x,y)) #2D-data

fig = plt.figure()
ax = fig.gca(projection='3d')
if data.shape[1] == 3:
  ax.scatter(data[:,0], data[:,1], data[:,2], c='lightgray', marker='o', s=50)
else :
  ax.scatter(date[:,0], data[:,1], c='lightgray', marker='o', s=50)
plt.grid(True)
plt.show()

#kmean 함수 실행
clu, c = kmean(data, 3)

#result printing
fig = plt.figure()
ax = fig.gca(projection='3d')
color = random.sample(list(mcolors.CSS4_COLORS.values()), len(c))
print(color)
for i in range(len(c)):
  if data.shape[1] == 3:
    ax.scatter(data[np.where(clu[:,i]==1)][:,0], data[np.where(clu[:,i]==1)][:,1], data[np.where(clu[:,i]==1)][:,2], c=color[i], marker = 's')
  else:
    ax.scatter(data[np.where(clu[:,i]==1)][:,0],data[np.where(clu[:,i]==1)], c= color[i], marker = 's')
  plt.show()
